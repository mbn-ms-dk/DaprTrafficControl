targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------
@description('The name of AKS cluster.')
param clusterName string

@description('The name of the keyvault')
param keyVaultName string

@description('The name of the application insights.')
param applicationInsightsName string

@description('Application insights secret name.')
param applicationInsightsSecretName string

@description('Optional. The name of Cosmos DB resource. If set, it overrides the name generated by the template.')
param cosmosDbName string

@description('The name of Cosmos DB\'s database.')
param cosmosDbDatabaseName string

@description('The name of Cosmos DB\'s collection.')
param cosmosDbCollectionName string

@description('Optional. The name of the service bus namespace. If set, it overrides the name generated by the template.')
param serviceBusName string

@description('The name of the service bus topic.')
param serviceBusTopicName string

@description('The name of the service for the mosquitto service. The name is use as Dapr App ID.')
param mosquittoServiceName string

@description('Use the mosquitto broker for MQTT communication. if false it uses Http')
param useMosquitto bool

@description('The name of the service for the mail service. The name is use as Dapr App ID.')
param mailServiceName string 

@description('Use actors in traffic control service')
param useActors bool

@description('The name of the service for the visualsimulation service. The name is use as Dapr App ID.')
param visualsimulationServiceName string

@description('The target and dapr port for the visualsimulation service.')
param visualsimulationPortNumber int

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('The name of the service for the finecollection service. The name is use as Dapr App ID and as the name of service bus topic subscription.')
param finecollectionServiceName string

@description('The name of the service for the trafficcontrol service. The name is use as Dapr App ID.')
param trafficcontrolServiceName string 

@description('The dapr port for the trafficcontrol service.')
param trafficcontrolPortNumber int

// Container Registry & Image
@description('The name of the container registry.')
param containerRegistryName string

@description('Aks userassigned client id')
param aksUserAssignedClientId string

@description('Aks userassigned principal id')
param aksUserAssignedPrincipalId string

@description('Aks workload identity service account name')
param serviceAccountName string

@description('Aks namespace')
param aksNameSpace string

@description('Secret Provider Class Name')
#disable-next-line secure-secrets-in-params //Disabling validation of this linter rule as param does not contain a secret.
param secretProviderClassName string

@description('Mail server secret username')
#disable-next-line secure-secrets-in-params //Disabling validation of this linter rule as param does not contain a secret.
param mailServerUserSecretsName string

@description('Mail server secret password name')
#disable-next-line secure-secrets-in-params //Disabling validation of this linter rule as param does not contain a secret.
param mailServerPasswordSecretsName string

// ------------------
//    RESOURCES
// ------------------
resource aks 'Microsoft.ContainerService/managedClusters@2023-04-02-preview' existing = {
  name: clusterName
}

// ------------------
//    DEPLOYMENT
// ------------------
@description('Create namespace for the application')
module ns 'services/ns.bicep' = {
  name: 'ns-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    aksNameSpace: aksNameSpace
  }
}

@description('Dapr configuration')
module dapr_config 'services/config.bicep' = {
  name: 'dapr-config-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
  ]
}

@description('Deploy Workload identity role')
module workloadIdenityRole 'services/wi-sa.bicep' = {
  name: 'wi-sa-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    aksUserAssignedClientId: aksUserAssignedClientId
    serviceAccountName: serviceAccountName
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
  ]
}

@description('Deploy Zipkin')
module zipkin 'apps/zipkin.bicep' = {
  name: 'zipkin-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
  ]
}

@description('Deploy dapr secret store')
module secretstore 'components/secretstore.bicep' = {
  name: 'secretstore-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    keyVaultName: keyVaultName
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
  ]
} 

@description('Deploy email secrets to secret store - keyvault')
module mailsecretstore 'services/mail-server-secrets.bicep' = {
  name: 'mailsecretstore-${uniqueString(resourceGroup().id)}'
  params: {
    keyVaultName: keyVaultName
    mailServerUserSecretsName: mailServerUserSecretsName
    mailServerPasswordSecretsName: mailServerPasswordSecretsName
  }
  dependsOn: [
    secretstore
  ]
}

@description('Deploy application insights secrets to secret store - keyvault')
module appinsightssecretstore 'services/app-insights-secrets.bicep' = {
  name: 'appinsightssecretstore-${uniqueString(resourceGroup().id)}'
  params: {
    keyVaultName: keyVaultName
    applicationInsightsName: applicationInsightsName
    applicationInsightsSecretName: applicationInsightsSecretName
  }
  dependsOn: [
    secretstore
  ]
}

// @description('Sync kayvault secrets to kubernetes secrets using CSI driver')
// module syncKv 'services/kvsync.bicep' = {
//   name: 'syncKv-${uniqueString(resourceGroup().id)}'
//   params: {
//     kubeConfig:  aksUserAssignedPrincipalId//aks.listClusterAdminCredential().kubeconfigs[0].value //base64(aks.properties.identityProfile.kubeletidentity.objectId) or base64(aks.properties.servicePrincipalProfile.clientId)
//     aksNameSpace: aksNameSpace
//     secretProviderClassName: secretProviderClassName
//     aksUserAssignedClientId: aksUserAssignedClientId
//     keyVaultName: keyVaultName
//     applicationInsightsSecretName: applicationInsightsSecretName
//     mailServerUserSecretsName: mailServerUserSecretsName
//     mailServerPasswordSecretsName: mailServerPasswordSecretsName
//   }
//   dependsOn: [
//     ns
//   ]
// }

@description('Deploy test sample pod')
module testpod 'apps/wlpod.bicep' = {
  name: 'testpod-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    serviceAccountName: serviceAccountName
    aksNameSpace: aksNameSpace
    secretProviderClassName: secretProviderClassName
    applicationInsightsSecretName: applicationInsightsSecretName
  }
  dependsOn: [
    ns
    workloadIdenityRole
  ]
}

@description('Deploy mosquitto service')
module mosquitto 'apps/mosquitto.bicep' =  if (useMosquitto) {
  name: 'mosquitto-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    mosquittoServiceName: mosquittoServiceName
    location: location
    containerRegistryName: containerRegistryName
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
  ]
}

@description('Deploy email dapr component')
module maildapr 'components/email-dapr.bicep' = {
  name: 'maildapr-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    aksNameSpace: aksNameSpace
    mailServerUserSecretsName: mailServerUserSecretsName
    mailServerPasswordSecretsName: mailServerPasswordSecretsName
  }
  dependsOn: [
    ns
  ]
}

@description('Deploy mailserver service')
module mailserver 'apps/mailserver.bicep' = {
  name: 'mailserver-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    mailServiceName: mailServiceName
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
    maildapr
  ]
}

@description('Deploy visualsimulation service')
module visualsimulation 'apps/visualsimulation.bicep' = {
  name: 'visualsimulation-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    location: location
    visualsimulationServiceName: visualsimulationServiceName
    visualsimulationPortNumber: visualsimulationPortNumber
    containerRegistryName: containerRegistryName
    applicationInsightsSecretName: applicationInsightsSecretName
    aksNameSpace: aksNameSpace
    secretProviderClassName: secretProviderClassName
    serviceAccountName: serviceAccountName
  }
  dependsOn: [
    ns
  ]
}

@description('Deploy dapr statestore component')
module statestore 'components/statestore.bicep' = {
  name: 'statestore-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    cosmosDbName: cosmosDbName
    cosmosDbCollectionName: cosmosDbCollectionName
    cosmosDbDatabaseName: cosmosDbDatabaseName
    trafficcontrolServiceName: trafficcontrolServiceName
    useActors: useActors
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
  ]
}

@description('Deploy pubsub component')
module pubsub 'components/pubsub.bicep' = {
  name: 'pubsub-${uniqueString(resourceGroup().id)}'
  params: {
    kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
    serviceBusName: serviceBusName
    finecollectionserviceServiceName: finecollectionServiceName
    trafficcontrolserviceServiceName: trafficcontrolServiceName
    aksNameSpace: aksNameSpace
  }
  dependsOn: [
    ns
  ]
}

// @description('Deploy trafficcontrol service')
// module trafficontrolservice 'apps/trafficcontrolservice.bicep' = {
//   name: 'trafficcontrolservice-${uniqueString(resourceGroup().id)}'
//   params: {
//     kubeConfig: aks.listClusterAdminCredential().kubeconfigs[0].value
//     location: location
//     cosmosDbName: cosmosDbName
//     cosmosDbCollectionName: cosmosDbCollectionName
//     cosmosDbDatabaseName: cosmosDbDatabaseName
//     serviceBusName: serviceBusName
//     serviceBusTopicName: serviceBusTopicName
//     aksPrincipalId: aks.identity.principalId
//     trafficcontrolServiceName: trafficcontrolServiceName
//     trafficcontrolPortNumber: trafficcontrolPortNumber
//     containerRegistryName: containerRegistryName
//     applicationInsightsSecretName: applicationInsightsSecretName
//     useActors: useActors
//     serviceAccountName: serviceAccountName
//   }
//   dependsOn: [
//     ns
//   ]
// }
